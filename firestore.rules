rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // 헬퍼 함수들
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacher() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function isStudent() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // 사용자 프로필 규칙 - 모든 사용자가 자신의 프로필을 업데이트할 수 있도록 개선
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (
        isTeacher() || 
        isAdmin()
      );
    }

    // 비밀번호 변경 로그 규칙
    match /passwordChangeLogs/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 교사-학생 관계 확인을 위한 규칙
    match /teacherStudentRelations/{relationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 반 정보 규칙
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 반 멤버 규칙
    match /classMembers/{memberId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 과제 규칙
    match /assignments/{assignmentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 과제 제출물 규칙
    match /assignmentSubmissions/{submissionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 개별 제출물 규칙 (submissions 컬렉션)
    match /submissions/{submissionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 제출물 상세 정보 규칙
    match /submissionDetails/{detailId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 제출물 피드백 규칙
    match /submissionFeedback/{feedbackId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (
        resource.data.teacherId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        resource.data.teacherId == request.auth.uid ||
        isAdmin()
      );
    }

    // 제출물 평가 규칙
    match /submissionGrades/{gradeId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 제출물 히스토리 규칙
    match /submissionHistory/{historyId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }

    // 제출물 첨부파일 메타데이터 규칙
    match /submissionFiles/{fileId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 제출물 상태 변경 로그 규칙
    match /submissionStatusLogs/{logId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }

    // 제출물 뷰어 설정 규칙
    match /submissionViewerSettings/{settingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 제출물 통계 규칙
    match /submissionStats/{statId} {
      allow read: if isAuthenticated() && (isTeacher() || isAdmin());
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // 제출물 댓글 규칙
    match /submissionComments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 퀴즈 제출물 규칙
    match /quizSubmissions/{submissionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.studentId
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 반 참가 요청 규칙
    match /classJoinRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.auth.uid == request.resource.data.requesterId
      );
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.teacherId ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.requesterId ||
        request.auth.uid == resource.data.teacherId ||
        isAdmin()
      );
    }

    // 알림 규칙
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated();
    }

    // 캘린더 이벤트 규칙
    match /calendarEvents/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 시간표 캐시 규칙
    match /timetableCache/{cacheId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 학교 정보 규칙
    match /schools/{schoolId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // 시간표 설정 규칙
    match /timetableSettings/{settingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 공지사항 규칙
    match /classNotices/{noticeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 모둠 규칙
    match /groups/{groupId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 모둠 제출물 규칙
    match /groupSubmissions/{submissionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 채팅방 규칙 (1:1 채팅용)
    match /chatRooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());

      // 채팅방 내 메시지 규칙
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated();
        allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
      }
    }

    // 채팅 메시지 규칙 (1:1 채팅용) - 별도 컬렉션
    match /chatMessages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 퀴즈 규칙
    match /quizzes/{quizId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 파일 메타데이터 규칙 - 프로필 이미지 업로드를 위해 모든 사용자가 생성 가능
    match /fileMetadata/{fileId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 출석 기록 규칙
    match /attendance/{attendanceId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 성적 기록 규칙
    match /grades/{gradeId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId ||
        isTeacher() ||
        isAdmin()
      );
      allow create: if isAuthenticated() && (isTeacher() || isAdmin());
      allow update: if isAuthenticated() && (isTeacher() || isAdmin());
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 댓글 규칙
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 좋아요/반응 규칙
    match /reactions/{reactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 활동 로그 규칙
    match /activityLogs/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }

    // 설정 규칙
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if isAuthenticated() && (isTeacher() || isAdmin());
    }

    // 관리자만 접근 가능한 컬렉션들
    match /adminLogs/{logId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    match /systemSettings/{settingId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    match /backups/{backupId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }

    // 기본적으로 모든 다른 문서는 거부
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
